Anthony Stallsworth
Changelog/Mental Notes

 -------------------------------------------May 8th-------------------------------------------
  A memory issue that I have been introduced to:
  * I have a Tape pointer which is located on the stack, pointing to an area on the heap.
    This pointer belongs to the TuringMachine Object and when the destructor gets called
    it runs "delete tape;" This should just take the pointer and delete everything that
    it references, however when it does this it gives me a double free runtime error.
    When I delete the destructor function it runs just fine however I am worried that
    there is a memory leak somewhere.

    I have taken some notes:
      * Corruption is when something is deleted before all references to it go out of scope.
      * Memory leak is where there are no more memory references to an item, however there is still
        memory allocated for it.

    Here are some steps I have taken to research my runtime error:
      * I installed a program called valgrind which checks for memory leaks, and when I ran it
        with my program, it said that there were no possible memory leaks both with and without
        the destructor functions. It works perfectly without the destructor functions (no
        corruptions or memory leaks) so I think I am just going to leave them out for now.
	I think that with the destructor functions there is some weird corruption happening
        which I would really like to find. I am not sure why it is occurring.

  Some mental notes!
  * Instead of going out of my way to avoid letting people change the state of certain objects,
    why do I not just make them const?

  * Can I write a program that generates tests for the Virtual Turing Machine?
    - Theorum for proving ALL functions/algorithms will work?

  * How did I fix multiplication and division?
    - How is multiplication and division used? Is it correct?

  * What can I do to make my code even cleaner?
    - Parser changes!

  * Where would I like to take this program in the future?
    - Possible website to show hiring managers. Rewrite in JavaScript?
    - What else can I challenge myself to learn in C++?

-------------------------------------------May 9th-------------------------------------------
  Memory Issues Continued...
  * So I have overwritten the copy constructor and the assignment operator
    for the TuringMachine.cpp class in hopes that I will stop getting the double 
    free or corruption error! At first I was getting a bad allocation error 
    with my assignment operator, and I made some changes. I think that this error
    is due to the runtime making sure that all the information was actually copied.
    I was not copying (or allocating) every member of the class and when I changed
    my code to do so it started working. However, I am still getting a double free or
    corruption error. I am not sure why and it is very annoying. What I am going to do
    is make a project on github, then do some heavy refactoring to the code. That way I
    can just go back on what I did if I made a serious mistake.

-------------------------------------------May 12th-------------------------------------------
  More insight on the memory issue
  * At this point I am fairly certain that my issue is I am making a Turing Machine object,
    and then using the assignment operator to change the State-Transition-Table to another
    Turing Machines STT (for running the result of the previous machine onto the next machine.)
    When I do this I need to make sure that the tape which gets copied over is a deep copy! This
    means that I may have to overload the copy and assignment operator for both the Turing Machine
    class AND the Tape class. I should probably do it for the other classes as well. What is
    probably happening is that the destructor is being called and deletes the tape of one machine,
    and then the next machine runs the destructor function however the tape is a shallow copy and
    therefore will double free something. So I am going to fix that.
    
      * So, during my process I was getting another error that I think I should mention. The Tape
        class is a private member inside of the TuringMachine class. My TuringMachine class had
        a function called getTape() which returned a Tape&, however it had no clue what a Tape
        object was in my header code because the type had not been declared yet. To fix this I
        had to write a forward declaration of the Tape class INSIDE of my Turing Machine class!
        For example, it looked like this:

          class TuringMachine
          {
            class Tape;

            public:
            ...
            Tape& getTape();
            ...

            private:
              class Tape
              {
	      ...
              }
      	  };

        The importance here is that forward declarations are very useful for the compiler to be able
        to recognize types BEFORE they are declared!

  * I fixed the memory error! It was a double free error like I thought... overwriting the copy
    constructor and the assignment operator for both the Tape class and TuringMachine class worked.

-------------------------------------------May 15th-------------------------------------------
 * I would like to start thinking about how I want to rewrite the way my program prints.
    Currently, when you call the constructor for a Parser object it takes a bool called print.
    This can either be true or false, and if it is true then the program will print every
    state of the Turing Machine while it is running. Since the linux terminal is not very fun
    to scroll up and down in, and it will not show the whole print anyways, the solution I 
    made was to pipe the output from the program into a file called turing and you can read it.
    It is actually pretty fun. No matter if the program prints or not, it will still write
    output to a file and open the file for you. I would like to write the compile_and_run
    bash script so that when you run it you tell it whether or not to print. You could either
    go:    ./compile_and_run
           which will just run the code and return an output.
    or:    ./compile_and_run print
           which will run the code, print the runtime state of the turing machine to an output
           file, and then open that file for you.

    The difference would be a real quality of life upgrade.

-------------------------------------------May 23rd-------------------------------------------
 * Since my last update, I have updated my parser. The idea behind my new parser is that it
   takes a string (which is the expression) and it will parse it as infix notation. It will
   then convert the infix notation string to prefix notation using the shunting-yard
   algorithm. This is because I really did not want to create an Abstract-Syntax Tree and
   bloat my code. My code currently is filled with if-statements and while-loops and uses
   both a stack and a queue. I am wondering if there is a better way to program the infix
   to postfix function however the function is a one-pass function so it is O(n). When an
   infix notation expression is transformed into a postfix expression, you can compute
   the postfix expression and it will follow the order of PEMDAS. There is also precedence
   now. I would really like to do more testing than I currently have to make sure it works.
   Right now I have just compared my output with another infix to postfix converter online.

 * When you are computing a postfix expression all you need is a stack. You push the numbers
   onto the stack and when you encounter an operator you pop two numbers off the stack, com-
   pute the answer and then push that back onto the stack. With this way of computation it
   is much easier for me to chain Turing Machines together, and later on I should be able
   to chain State-Transition-Tables in order to create a larger State-Transition-Table
   very easily.
